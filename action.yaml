name: Create Release
description: Create Github Release
inputs:
  tag:
    description: Tag to create release
    required: true
    default: ${{ github.ref_name }}
  name:
    description: Release name
    required: false
  body:
    description: Release body as a JSON string
    required: false
  generate-notes:
    description: >
      Automatically generate release notes.
      Base tag to generate release notes as a base
      Valid values: Boolean or tag ref
    required: true
    default: true
  prerelease:
    description: Mark release as prerelease
    required: false
    default: false
  files:
    description: Files to attach to the release
    required: false
  discussion-category:
    description: Github Discussion category
    required: false
  token:
    description: Github Token
    required: true
    default: ${{ github.token }}
  repository:
    description: Repository to create the release for
    required: true
    default: ${{ github.repository }}
outputs:
  id:
    description: Release ID
    value: ${{ steps.create.outputs.id }}
  json:
    description: Release JSON
    value: ${{ steps.create.outputs.json }}
runs:
  using: composite
  steps:
  - id: generated-release-notes
    if: ${{ inputs.generate-notes }}
    uses: swaglive/action-generate-release-notes@v1
    with:
      tag: ${{ inputs.tag }}
      base: ${{ inputs.generate-notes }}

  - shell: bash
    id: create
    env:
      GITHUB_TOKEN: ${{ inputs.token }}
      GH_REPO: ${{ inputs.repository }}
      OPTS: |
        tag_name: ${{ inputs.tag }}
        name: ${{ inputs.name || steps.generated-release-notes.outputs.name || inputs.tag }}
        body:
        - ${{ toJSON(inputs.body || null) }}
        - ${{ steps.generated-release-notes.outputs.body }}
        prerelease: ${{ inputs.prerelease }}
        discussion_category_name: ${{ inputs.discussion-category }}
    run: |
      opts=$(
        yq e -o json <<< $OPTS | jq 'del(.. | nulls) | .body |= join("\n\n")'
      )

      release=$(
        gh api repos/$GH_REPO/releases --input - <<< $opts
      )

      echo "::set-output name=id::$(jq -rc '.id' <<< $release)"
      echo "::set-output name=json::$(jq -c '.' <<< $release)"

  - shell: bash
    if: ${{ inputs.files }}
    env:
      GITHUB_TOKEN: ${{ inputs.token }}
      GH_REPO: ${{ inputs.repository }}
    run: |
      # BUG: https://github.com/cli/cli/issues/4993
      gh release upload ${{ inputs.tag }} --clobber ${{ inputs.files }}

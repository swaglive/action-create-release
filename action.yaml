name: Create Github Release
description: Create a Github Release
branding:
  icon: box
  color: white
inputs:
  tag:
    description: Tag to create release
    required: true
    default: ${{ github.ref_name }}
  name:
    description: Release name
    required: false
  body:
    description: Release body
    required: false
  body-file:
    description: Filename to the release body content
    required: false
  generate-release-notes:
    description: |-
      Automatically generate release notes. Set to `true` to generate release notes from the latest release. Valid values: `true`, `false` or tag
    required: true
    default: "true"
  prerelease:
    description: Mark release as prerelease
    required: false
    default: "false"
  files:
    description: Files to attach to the release. One file per line
    required: false
  discussion-category:
    description: Github Discussion category
    required: false
  dry-run:
    description: Dry run
    required: false
    default: "false"
outputs:
  id:
    description: Release ID
    value: ${{ fromJSON(steps.release.outputs.result).id }}
  url:
    description: Release URL
    value: ${{ fromJSON(steps.release.outputs.result).url }}
  name:
    description: Release Name
    value: ${{ fromJSON(steps.release.outputs.result).name }}
  body:
    description: Release Body
    value: ${{ fromJSON(steps.release.outputs.result).body }}
  tag:
    description: Release Tag
    value: ${{ fromJSON(steps.release.outputs.result).tag_name }}
  prerelease:
    description: Release Prerelease
    value: ${{ fromJSON(steps.release.outputs.result).prerelease }}
  json:
    description: Release as JSON
    value: ${{ steps.release.outputs.result }}
runs:
  using: composite
  steps:
  - id: release
    uses: actions/github-script@v7
    env:
      INPUT_TAG: ${{ inputs.tag }}
      INPUT_NAME: ${{ inputs.name }}
      INPUT_BODY: ${{ inputs.body }}
      INPUT_BODY-FILE: ${{ inputs.body-file }}
      INPUT_GENERATE-RELEASE-NOTES: ${{ inputs.generate-release-notes }}
      INPUT_PRERELEASE: ${{ inputs.prerelease }}
      INPUT_FILES: ${{ inputs.files }}
      INPUT_DISCUSSION-CATEGORY: ${{ inputs.discussion-category }}
      INPUT_DRY-RUN: ${{ inputs.dry-run }}
    with:
      script: |-
        const fs = require('fs').promises
        const path = require('path')
        const util = require('util')

        const { owner, repo } = context.repo
        const tag_name = core.getInput('tag', { required: true })
        let name = core.getInput('name')
        let body = [core.getInput('body')]
        const bodyFile = core.getInput('body-file')
        const prerelease = core.getBooleanInput('prerelease')
        const files = core.getMultilineInput('files')
        const discussion_category_name = core.getInput('discussion-category')
        const dryRun = core.getBooleanInput('dry-run')
        let generate_release_notes = core.getInput('generate-release-notes')

        // Append `body-file` to `body`
        if (bodyFile) {
          body = [
            ...body,
            await fs.readFile(bodyFile, 'utf8')
          ]
        }

        try {
          generate_release_notes = core.getBooleanInput('generate-release-notes')
        } catch (error) {
        }

        if (generate_release_notes) {
          let { data } = await github.rest.repos.generateReleaseNotes({
            owner,
            repo,
            tag_name,
            previous_tag_name: generate_release_notes === true ? undefined : generate_release_notes,
          })
          name = name || data.name
          body = [...body, data.body]
        }

        let release = {
          owner,
          repo,
          tag_name,
          prerelease,
          discussion_category_name,
          name,
          body: body.filter(x => x).join('\n'),
        }

        // Create Release
        if (!dryRun) {
          { data: release } = await github.rest.repos.createRelease(release)

          await Promise.all(files.map(async (file) => github.rest.repos.uploadReleaseAsset({
            owner,
            repo,
            release_id: release.id,
            name: path.basename(file),
            data: await fs.readFile(file),
          })))
        }

        core.group('Output', () => {
          core.info(util.inspect(release, { colors: true }))
        })

        return release
